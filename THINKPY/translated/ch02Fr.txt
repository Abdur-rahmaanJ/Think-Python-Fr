Chapitre 2
Variables, expressions et
déclarations

2.1 Valeurs et types

Une valeur est l'une des choses fondamentales - comme une lettre ou un chiffre - que le programme manipule. Les valeurs que nous avons vues jusqu'ici sont 2 (le résultat quand nous
ajouté 1 + 1), et "Hello World".
Ces valeurs appartiennent à différents types: 2 est un entier, et "Hello, World!" est une chaîne de charactères, soi-disant parce qu'elle contient une "chaîne" de lettres. Vous (et l'interprète) peut identifier les chaînes car elles sont placées entre guillemets.
L'instruction print fonctionne également pour les entiers.
>>> print 4
4
Si vous n'êtes pas sûr du type d'une valeur, l'interprète peut vous le dire.
>>> type ("Bonjour, Monde!")
<type 'str'>
>>> type (17)
<type 'int'>
Sans surprise, les chaînes appartiennent au type str et les entiers appartiennent au type int. Moins évident, les nombres avec un point décimal appartiennent à un type appelé float, car ces nombres sont représentés dans un format appelé float.

>>> type (3.2)
<type 'float'>
Qu'en est-il des valeurs comme "17" et "3.2"? Ils ressemblent à des chiffres, mais ils sont
entre guillemets comme des chaînes.
>>> type ("17")
<type 'str'>
>>> type ("3.2")
<type 'str'>
Ce sont des chaînes de charactères.
Lorsque vous tapez un grand entier, vous pourriez être tenté d'utiliser des virgules entrengroupes de trois chiffres, comme en 1.000.000 Ce n'est pas un entier légal en Python,
mais c'est une expression légale:
>>> print 1 000 000
1 0 0
Eh bien, ce n'est pas ce que nous attendions du tout! Python interprète 1 000 000 comme liste séparée par des virgules de trois entiers, qu'elle imprime consécutivement. C'est le premier exemple que nous avons vu d'une erreur sémantique: le code s'exécute sans produisant un message d'erreur, mais il ne fait pas la "bonne" chose.

2.2 Variables

L'une des caractéristiques les plus puissantes d'un langage de programmation est la capacité à manipuler des variables. Une variable est un nom qui fait référence à une valeur.
L'instruction d'affectation crée de nouvelles variables et leur donne des valeurs:
>>> message = "Quoi de neuf, Doc?"
>>> n = 17
>>> pi = 3.14159
Cet exemple fait trois affectations. Le premier affecte la chaîne "Quoi de neuf, Doc?"dans une nouvelle variable nommée message.La seconde donne l'entier 17 à n, et le troisième donne le nombre à virgule flottante 3.14159 à pi.
Une façon courante de représenter les variables sur papier est d'écrire le nom avec un flèche pointant vers la valeur de la variable. Ce genre de figure est appelé un diagramme états-transitions car il montre dans quel état se situe chacune des variables (pensez-y à l'état d'esprit de la variable). Ce diagramme montre le résultat de l'affectation:
2.3 Noms de variables et mots-clés 13
message
n
pi
"Quoi de neuf doc?"
17
3.14159
L'instruction print fonctionne également avec des variables.
>>> print message
"Quoi de neuf doc?"
>>> print n
17
>>> print pi
3.14159
Dans chaque cas, le résultat est la valeur de la variable. Les variables ont aussi des types;
encore une fois, nous pouvons demander à l'interprète ce qu'ils sont.
>>> type (message)
<type 'str'>
>>> type (n)
<type 'int'>
>>> type (pi)
<type 'float'>
Le type d'une variable est le type de la valeur à laquelle elle se réfère.

2.3 Noms de variables et mots-clés

Les programmeurs choisissent généralement des noms pour leurs variables qui sont significatives - ils documentent à quoi la variable est utilisée pour.
Les noms de variables peuvent être arbitrairement longs. Ils peuvent contenir à la fois des lettres et des chiffres, mais ils doivent commencer par une lettre. Bien qu'il ne soit pas intrdit d'utiliser des lettres majuscules, par convention, nous ne le faisons pas. Si vous le faites, rappelez-vous que cette affaire est importante. Bruce
et bruce sont des variables différentes.
Le caractère de soulignement () peut apparaître dans un nom. Il est souvent utilisé dans les noms avec des mots multiples, tels que mon nom ou le prix du thé en Chine.
Si vous attribuez un nom illégal à une variable, vous obtenez une erreur de syntaxe:

>>> 76trombones = "grand défilé"
SyntaxError: invalid syntax
>>> plus $ = 1000000
SyntaxError: invalid syntax
>>> class = "Informatique 101"
SyntaxError: invalid syntax
76trombones est illégal car il ne commence pas par une lettre. plus $ est illégal parce qu'il contient un caractère illégal, le signe du dollar. Mais quel est le problème avec class?
Il s'avère que cette class est l'un des mots-clés Python. Les mots-clés définissent les règles et la structure du langage, et ils ne peuvent pas être utilisés comme noms de variables.
Python a vingt-neuf mots-clés:
and def exec if not return
assert del finally import or try
break elif for in pass while
class else from is print yield
continue except global lambda raise
Vous pourriez vouloir garder cette liste à portée de main. Si l'interprète se plaint d'un de vos noms de variables et vous ne savez pas pourquoi, voyez si c'est sur cette liste.

2.4 Déclarations

Une déclaration est une instruction que l'interpréteur Python peut exécuter. Nous avons vu deux types d'déclarations: print et affectations.
Lorsque vous tapez une instruction sur la ligne de commande, Python l'exécute et affiche le résultat, s'il y en a un. Le résultat d'une instruction print est une valeur.
Les instructions d'affectation ne produisent pas de résultat.
Un script contient généralement une séquence d'instructions. S'il y en a plus d'un déclaration, les résultats apparaissent un à la fois.
Par exemple, le script
print 1
x = 2
print x
produit la valeur 2.5 Évaluation des expressions 15
1
2
Encore une fois, l'instruction d'affectation ne produit aucun affichage.

2.5 Évaluation des expressions

Une expression est une combinaison de valeurs, de variables et d'opérateurs. Si vous tapez une expression sur la ligne de commande, l'interprète l'évalue et affiche le résultat:
>>> 1 + 1
2
Bien que les expressions contiennent des valeurs, des variables et des opérateurs, pas toutes les expressions contient tous ces éléments. Une valeur tout seul est considérée comme expression, et est donc une variable.
>>> 17
17
>>> x
2
Etonnement, évaluer une expression n'est pas tout à fait la même chose que d'imprimer un valeur.
>>> message = "Quoi de neuf, Doc?"
>>> message
"Quoi de neuf doc?"
>>> print message
"Quoi de neuf doc?"
Lorsque l'interpréteur Python affiche la valeur d'une expression, il utilise le même format que vous utiliseriez pour entrer une valeur. Dans le cas des chaînes, cela signifie qu'il inclut les guillemets. Mais si vous utilisez print, Python affiche le contenu de la chaîne sans les guillemets.
Dans un script, une expression tout seul est une déclaration légale, mais elle ne fait rien. Le script
17
3.2
"Bonjour le monde!"
1 + 1
ne produit aucune affichage. Comment changeriez-vous le script pour afficher les valeurs de ces quatre expressions?

2.6 Opérateurs et opérandes

Les opérateurs sont des symboles spéciaux qui représentent des calculs comme l'addition et multiplication. Les valeurs utilisées par l'opérateur sont appelées opérandes.
Ce qui suit sont toutes les expressions Python légales dont la signification est plus ou moins claire:
20 + 32 heures-1 heure * 60 + minutes minute / 60 5 ** 2 (5 + 9) * (15-7)
Les symboles +, -, et /, et l'utilisation de parenthèses pour le regroupement signifient en Python ce qu'ils veulent dire en mathématiques. L'astérisque (*) est le symbole de
multiplication, et ** est le symbole de l'exponentiation.
Quand un nom de variable apparaît à la place d'un opérande, il est remplacé par sa valeur avant que l'opération soit effectuée.
L'addition, la soustraction, la multiplication et l'exponentiation font toutes ce que vous attendez,
mais vous pourriez être surpris par la division. L'opération suivante a un
résultat inattendu:
>>> minute = 59
>>> minute / 60
0
La valeur de minute est 59, et en arithmétique conventionnelle 59 divisé par 60 est
0,98333, pas 0. La raison de l'écart est que Python effectue une division entière.
Lorsque les deux opérandes sont des entiers, le résultat doit également être un entier, et par convention, la division entière arrondit toujours vers le bas, même dans des cas comme celui-ci où
l'entier suivant est très proche.
Une solution possible à ce problème consiste à calculer un pourcentage plutôt qu'un
fraction:
>>> minute * 100/60
98
Encore une fois le résultat est arrondi vers le bas, mais au moins maintenant la réponse est environ
correct. Une autre alternative est d'utiliser la division à virgule flottante, que nous parcourerons au Chapitre 3.

2.7 Ordre des opérations

Lorsque plus d'un opérateur apparaît dans une expression, l'ordre d'évaluation
dépend des règles de préséance. Python suit la même préséance
règles pour ses opérateurs mathématiques que les mathématiques font. L'acronyme PEMDAS est un moyen utile de se souvenir de l'ordre des opérations :
• Les parenthèses ont la plus haute priorité et peuvent être utilisées pour forcer un
expression à évaluer dans l'ordre que vous voulez. Depuis les expressions entre parenthèses
sont évalués en premier, 2 * (3-1) est 4, et (1 + 1) ** (5-2) est 8. Vous pouvez également utiliser des parenthèses pour rendre une expression plus facile à lire, comme dans (minute * 100) / 60, même si cela ne change pas le résultat.
• L'exponentiation a la plus haute priorité suivante, donc 2 ** 1 + 1 est 3 et non
4, et 3 * 1 ** 3 est 3 et non 27.
• La multiplication et la division ont la même précédence, ce qui est plus élevé
que l'addition et la soustraction, qui ont également la même priorité. Alors
2 * 3-1 donne 5 plutôt que 4, et 2 / 3-1 est -1, pas 1 (souvenez-vous que dans
division entière, 2/3 = 0).
• Les opérateurs ayant la même priorité sont évalués de gauche à droite. Donc dans
l'expression minute * 100/60, la multiplication arrive en premier, produisant
5900/60, ce qui donne à son tour 98. Si les opérations avaient été évaluées
de droite à gauche, le résultat aurait été 59 * 1, ce qui est 59, ce qui est faux.

2.8 Opérations sur les chaînes
En général, vous ne pouvez pas effectuer d'opérations mathématiques sur des chaînes, même si
les chaînes ressemblent à des nombres. Les éléments suivants sont illégaux (en supposant que ce message a pour type string):
message-1 "Bonjour" / 123 message * "Bonjour" "15" +2
Fait intéressant, l'opérateur + travaille avec des chaînes, bien qu'il ne le fasse pas exactement ce que vous pourriez attendre. Pour les chaînes, l'opérateur + représente la concaténation, ce qui signifie rejoindre les deux opérandes en les reliant bout à bout. Pour
Exemple:
fruit = "banane"
bakedGood = " pain aux noix"
print fruits + bakedGood
Le résultat de ce programme est "banane pain aux noix". L'espace avant le mot noix fait partie de la chaîne, et est nécessaire pour produire l'espace entre le chaînes concaténées.
L'opérateur * travaille également sur les chaînes; il effectue la répétition. Par exemple,
"Fun" * 3 est "FunFunFun". L'un des opérandes doit être une chaîne; l'autre doit être un nombre entier.

D'une part, cette interprétation de + et * a un sens par analogie avec l'addition et multiplication. Tout comme 4 * 3 équivaut à 4 + 4 + 4, nous nous attendons à ce que "Fun" * 3
être le même que "Fun" + "Fun" + "Fun", et il est. D'un autre côté, il y a un façon significative dans laquelle la concaténation de chaînes et la répétition sont différentes de addition et multiplication entières. Pouvez-vous penser à une propriété que l'addition
et la multiplication ont et que la concaténation et la répétition n'ont pas?

2.9 Composition

Jusqu'à présent, nous avons examiné les éléments d'un programme-variables, expressions,et déclarations - isolément, sans parler de la façon de les combiner.
L'une des caractéristiques les plus utiles des langages de programmation est leur capacité à prendre de petits blocs de construction et de les composer. Par exemple, nous savons comment ajouter des chiffres et nous savons comment imprimer; il se trouve que nous pouvons faire les deux à la fois :
>>> print 17 + 3
20
En réalité, l'ajout doit se produire avant l'impression, de sorte que les actions ne sont pas
se passe réellement en même temps. Le fait est que toute expression impliquant les nombres, les chaînes et les variables peuvent être utilisés dans une instruction print. Vous avez
déjà vu un exemple de ceci:
print "Nombre de minutes écoulées depuis minuit:", heure * 60 + minute
Vous pouvez également placer des expressions arbitraires sur le côté droit d'une affectation :
pourcentage = (minute * 100) / 60
Cette capacité peut ne pas sembler impressionnante maintenant, mais vous verrez d'autres exemples
où la composition permet d'exprimer des calculs complexes
et concise.
Attention: Il y a des limites sur l'endroit où vous pouvez utiliser certaines expressions. Par exemple,
le côté gauche d'une instruction d'affectation doit être un nom de variable,
pas une expression. Donc, ce qui suit est illégal: minute + 1 = heure.

2.10 Commentaires

À mesure que les programmes deviennent plus gros et plus compliqués, ils deviennent plus difficiles à lire.
Les langages formels sont denses, et il est souvent difficile de regarder un morceau de code
et comprendre ce qu'il fait, ou pourquoi.

Pour cette raison, c'est une bonne idée d'ajouter des notes à vos programmes pour expliquer dans
langage naturel ce que le programme fait. Ces notes sont appelées commentaires,
et ils sont marqués du symbole #:
# calcule le pourcentage de l'heure qui s'est écoulée
pourcentage = (minute * 100) / 60
Dans ce cas, le commentaire apparaît sur une ligne par lui-même. Vous pouvez également mettre des commentaires
à la fin d'une ligne:
pourcentage = (minute * 100) / 60 # attention: division entière
Tout du # à la fin de la ligne est ignoré - il n'a aucun effet sur le
programme. Le message est destiné au programmeur ou aux futurs programmeurs
qui pourrait utiliser ce code. Dans ce cas, il rappelle au lecteur le
comportement toujours surprenant de la division entière.
Ce genre de commentaire est moins nécessaire si vous utilisez l'opération de division entière,
//. Il a le même effet que l'opérateur de division1
, mais cela indique que l'effet est délibéré.
pourcentage = (minute * 100) // 60
L'opérateur de division entier est comme un commentaire qui dit: "Je sais que c'est un nombre entier
division, et je l'aime comme ça! "

2.11 Glossaire

value: Un nombre ou une chaîne (ou une autre chose à nommer plus tard) qui peut être stockée dans une variable ou calculé dans une expression.
type: un ensemble de valeurs. Le type d'une valeur détermine comment elle peut être utilisée dans les expressions. Jusqu'à présent, les types que vous avez vus sont des entiers (type int), nombres flottants (type float) et chaînes (type string).
floating-point: Un format pour représenter des nombres avec des parties fractionnaires.
variable: un nom qui fait référence à une valeur.
statement: Une section de code représentant une commande ou une action. Jusqu'à présent, les déclarations que vous avez vues sont des affectations et des déclarations print.
affectation: une instruction qui affecte une valeur à une variable.
1Pour maintenant. Le comportement de l'opérateur de division peut changer dans les futures versions de Python.
20 Variables, expressions et déclarations 
state diagrams: Représentation graphique d'un ensemble de variables et des valeurs
auquel ils se réfèrent.
keyword : mot réservé utilisé par le compilateur pour analyser un programme;
vous ne pouvez pas utiliser des mots-clés comme if, def et while comme noms de variables.
operator: Un symbole spécial qui représente un calcul simple comme l'addition,
multiplication, ou concaténation de chaîne.
Opérande: Une des valeurs sur lesquelles un opérateur opère.
expression: une combinaison de variables, d'opérateurs et de valeurs représentant
une seule valeur de résultat.
évaluer: Pour simplifier une expression en effectuant les opérations afin de
donner une seule valeur.
division entière: Opération qui divise un entier par un autre et donne
un nombre entier. La division entière ne donne que le nombre entier de fois que
Le numérateur est divisible par le dénominateur et rejette tout ce qui reste.
règles de précédance: Ensemble de règles régissant l'ordre dans lequel les expressions impliquant plusieurs opérateurs et opérandes sont évalués.
concaténer: Pour combiner deux opérandes.
composition: La capacité de combiner des expressions simples et des déclarations dans
expressions et expressions composées afin de représenter des calculs complexes
avec concision.
commentaire : Information dans un programme destiné à d'autres programmeurs (ou quiconque lit le code source) et n'a aucun effet sur l'exécution du programme.