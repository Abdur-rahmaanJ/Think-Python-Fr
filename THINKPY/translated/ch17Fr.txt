Chapitre 17

Classes et méthodes
Bien que nous utilisions certaines des fonctionnalités orientées objet de Python, les programmes de la
Les deux derniers chapitres ne sont pas vraiment orientés objet, car ils ne représentent pas les relations entre les types définis par le programmeur et les fonctions qui les exploitent. L'étape suivant
consiste à transformer ces fonctions en méthodes qui rendent les relations explicites.
Des exemples de code de ce chapitre sont disponibles à l'adresse http://thinkpython2.com/code/.
Time2.py et les solutions aux exercices se trouvent dans http://thinkpython2.com/code/Point2_
soln.py.

17.1

Caractéristiques orienté objet

Python est un langage de programmation orienté objet, ce qui signifie qu'il fournit des fonctionnalités prenant en charge la programmation orientée objet qui présente les caractéristiques suivantes:
• Les programmes incluent des définitions de classe et de méthode.
• La plupart des calculs sont exprimés en termes d'opérations sur des objets.
• Les objets représentent souvent des choses dans le monde réel, et les méthodes correspondent souvent aux
façons dont les choses dans le monde réel interagissent.
Par exemple, la classe Time définie au chapitre 16 correspond à la façon dont les gens enregistrent
le moment de la journée, et les fonctions que nous avons définies correspondent au genre de choses que les gens font
avec les temps. De même, les classes Point et Rectangle du chapitre 15 correspondent aux
concepts mathématiques d'un point et d'un rectangle.
Jusqu'à présent, nous n'avons pas tiré parti des fonctionnalités fournies par Python pour prendre en charge la programmation orientée objet. Ces fonctionnalités ne sont pas strictement nécessaires. la plupart d'entre eux fournissent une
syntaxe alternative pour les choses que nous avons déjà faites. Mais dans de nombreux cas, l'alternative est
plus concis et plus précisément la structure du programme.
Par exemple, dans Time1.py, il n’ya pas de lien évident entre la définition de la classe et
les définitions de fonction qui suivent. En examinant, il apparaît que chaque fonction prend au moins un objet Time comme argument.

162

Chapitre 17. Classes et méthodes

Cette observation est la motivation pour les méthodes; une méthode est une fonction associée
avec une classe particulière. Nous avons vu des méthodes pour les chaînes, les listes, les dictionnaires et les tuples. Dans
Dans ce chapitre, nous définirons des méthodes pour les types définis par le programmeur.
Les méthodes sont sémantiquement identiques aux fonctions, mais il existe deux différences syntaxiques:
• Les méthodes sont définies dans une définition de classe afin de rendre explicite la relation entre la classe et la méthode.
• La syntaxe utilisée pour appeler une méthode est différente de celle utilisée pour appeler une fonction.
Dans les sections suivantes, nous reprendrons les fonctions des deux chapitres précédents et
transformez-les en méthodes. Cette transformation est purement mécanique. vous pouvez le faire par
en suivant une séquence d'étapes. Si vous êtes à l'aise pour convertir d'un formulaire à un autre,
vous serez en mesure de choisir la meilleure forme pour ce que vous faites.

17.2

imprimer les objets

Au chapitre 16, nous avons défini une classe nommée Time et à la section 16.1, vous avez écrit une fonction
nommé print_time:





Pour appeler cette fonction, vous devez passer un objet Time en argument:







Pour que print_time soit une méthode, il suffit de déplacer la définition de la fonction dans le
définition de classe. Notez le changement d'indentation.




Il existe maintenant deux manières d'appeler print_time. La première (et moins commune) consiste à utiliser la
syntaxe de la fonction:



Dans cette utilisation de la notation par points, Time est le nom de la classe et print_time est le nom du
méthode. start est passé en paramètre.
La deuxième manière (plus concise) consiste à utiliser la syntaxe de la méthode:




17.3. Un autre exemple

163

Dans cette utilisation de la notation par points, print_time est le nom de la méthode (à nouveau) et start est
l'objet sur lequel la méthode est invoquée, appelé sujet. Tout comme le sujet d'une
phrase est ce que la phrase est sur, le sujet d'une invocation de méthode est ce que le
la méthode est à propos.
Dans la méthode, le sujet est affecté au premier paramètre. Dans ce cas, start est
assigné à temps.
Par convention, le premier paramètre d'une méthode s'appelle self, il serait donc plus courant
d'écrire print_time comme ceci:




La raison de cette convention est une métaphore implicite:
• La syntaxe d’un appel de fonction, print_time (start), suggère que la fonction est
l'agent actif. Il dit quelque chose comme: “Hey print_time! Voici un objet pour
l'impression."
• En programmation orientée objet, les objets sont les agents actifs. Une invocation de méthode telle que start.print_time () dit «Hey start! S'il vous plaît imprimez vous-même. "
Ce changement de perspective est peut-être plus poli, mais il n’est pas évident qu’il soit utile. dans le
exemples que nous avons vu jusqu'à présent, il se peut que ce ne soit pas le cas. Mais parfois, le transfert de responsabilité du
fonctions sur les objets permet d'écrire des fonctions (ou méthodes) plus polyvalentes,
et facilite la maintenance et la réutilisation du code.
À titre d’exercice, réécrivez time_to_int (section 16.4) en tant que méthode. Vous pourriez être tenté
de réécrire int_to_time comme méthode aussi, mais cela n’a pas vraiment de sens car il y a
ne serait pas un objet pour l'invoquer.

17,3

Un autre exemple

Voici une version d’incrément (section 16.3) réécrite en tant que méthode:





Cette version suppose que time_to_int est écrit en tant que méthode. En outre, notez que c'est un pur
fonction, pas un modificateur.
Voici comment vous appelez incrémentation:







164

Chapitre 17. Classes et méthodes

Le sujet, commencer, est assigné au premier paramètre, self. L'argument, 1337, obtient
affecté au deuxième paramètre, secondes.
Ce mécanisme peut être déroutant, surtout si vous faites une erreur. Par exemple, si vous
invoquer incrémenter avec deux arguments, vous obtenez:


TypeError: increment () prend 2 arguments de position mais 3 ont été donnés
Le message d'erreur est initialement source de confusion, car il n'y a que deux arguments entre parenthèses. Mais le sujet est aussi considéré comme un argument, alors, ensemble, cela fait trois.
Soit dit en passant, un argument de position est un argument qui n’a pas de nom de paramètre;
c'est-à-dire que ce n'est pas un argument de mot clé. Dans cet appel de fonction:


perroquet et cage sont positionnels, et dead est un argument de mot clé.

17.4

Un exemple plus compliqué

La réécriture d’is_after (à partir de la section 16.1) est légèrement plus compliquée car il faut deux
Objets temporels en tant que paramètres. Dans ce cas, il est classique de nommer le premier paramètre self
et le second paramètre other:




Pour utiliser cette méthode, vous devez l'invoquer sur un objet et transmettre l'autre en tant qu'argument:



Une bonne chose à propos de cette syntaxe est qu’elle se lit presque comme en anglais: “end is after start?”

17,5

La méthode init

La méthode init (abréviation pour “initialisation”) est une méthode spéciale qui est invoquée lorsqu’un
objet est instancié. Son nom complet est __init__ (deux caractères de soulignement, suivis de
init, puis deux autres underscores). Une méthode init pour la classe Time pourrait ressembler à
ceci:






Il est courant que les paramètres de __init__ aient les mêmes noms que les attributs. le
déclaration



17.6. La méthode __str__

165

stocke la valeur du paramètre hour en tant qu'attribut de self.
Les paramètres sont facultatifs. Par conséquent, si vous appelez Time sans arguments, vous obtenez les valeurs
par défaut.




Si vous fournissez un argument, il remplace heure:




Si vous fournissez deux arguments, ils ont priorité sur heure et minute.




Et si vous fournissez trois arguments, ils remplacent les trois valeurs par défaut.
En tant qu’exercice, écrivez une méthode init pour la classe Point qui prend x et y comme facultatif.
paramètres et les affecte aux attributs correspondants.

17,6

La méthode __str__

__str__ est une méthode spéciale, telle que __init__, qui est supposée renvoyer une représentation sous forme de chaîne d'un objet.
Par exemple, voici une méthode str pour les objets Time:




Lorsque vous imprimez un objet, Python appelle la méthode str:




Quand j'écris un nouveau cours, je commence presque toujours par écrire __init__, ce qui facilite la tâche.
pour instancier des objets, et __str__, ce qui est utile pour le débogage.
En tant qu’exercice, écrivez une méthode str pour la classe Point. Créez un objet Point et imprimez-le.

17,7

Surcharge de l'opérateur

En définissant d’autres méthodes spéciales, vous pouvez spécifier le comportement des opérateurs sur
types définis par le programmeur. Par exemple, si vous définissez une méthode nommée __add__ pour le
Classe Time, vous pouvez utiliser l'opérateur + sur les objets Time.
Voici à quoi pourrait ressembler la définition:

166

Chapitre 17. Classes et méthodes





Et voici comment vous pouvez l'utiliser:





Lorsque vous appliquez l'opérateur + aux objets Time, Python appelle __add__. Quand vous imprimez
le résultat, Python invoque __str__. Donc, il se passe beaucoup de choses dans les coulisses!
Changer le comportement d’un opérateur pour qu’il fonctionne avec les types définis par le programmeur est
opérateur appelé surcharge. Pour chaque opérateur de Python, il existe une méthode spéciale correspondante, telle que __add__. Pour plus de détails, voir http://docs.python.org/3/reference/
datamodel.html # specialnames.
En tant qu’exercice, écrivez une méthode add pour la classe Point.

17,8

Envoi type

Dans la section précédente, nous avons ajouté deux objets Time, mais vous pouvez également ajouter un objet.
entier à un objet Time. Voici une version de __add__ qui vérifie le type de
other et appelle add_time ou increment:













La fonction intégrée isinstance prend une valeur et un objet de classe et renvoie True si le
valeur est une instance de la classe.
Si other est un objet Time, __add__ appelle add_time. Sinon, il suppose que le paramètre est un nombre et appelle incrémenter. Cette opération s'appelle une répartition basée sur un type.
car il distribue le calcul à différentes méthodes en fonction du type des arguments.
Voici des exemples qui utilisent l'opérateur + avec différents types:

17.9. Polymorphisme

167







Malheureusement, cette mise en œuvre de l'addition n'est pas commutative. Si l'entier est le
premier opérande, vous obtenez


TypeError: type (s) d'opérande non pris en charge pour +: 'int' et 'instance'
Le problème est qu'au lieu de demander à l'objet Time d'ajouter un entier, Python demande à
entier pour ajouter un objet Time, et il ne sait pas comment. Mais il existe une solution intelligente pour cela
problème: la méthode spéciale __radd__, qui signifie “right-add add”. Cette méthode
est invoqué lorsqu'un objet Time apparaît à droite de l'opérateur +. Ici se trouve le
définition:

# à l'intérieur de la classe


Et voici comment cela est utilisé:



En tant qu’exercice, écrivez une méthode add pour Points qui fonctionne soit avec un objet Point, soit avec un objet Point.
tuple:
• Si le deuxième opérande est un point, la méthode doit retourner un nouveau point dont x
coordonnée est la somme des coordonnées x des opérandes, et de même pour les
coordonnées y.
• Si le deuxième opérande est un tuple, la méthode doit ajouter le premier élément du tuple.
à la coordonnée x et le deuxième élément à la coordonnée y, et retourne un nouveau
Point avec le résultat.

17,9

Polymorphisme

La répartition par type est utile lorsque cela est nécessaire, mais (heureusement), ce n'est pas toujours nécessaire. Vous pouvez souvent l’éviter en écrivant des fonctions qui fonctionnent correctement pour les arguments avec
différents types.
La plupart des fonctions que nous avons écrites pour les chaînes fonctionnent également pour d'autres types de séquence. Par exemple, dans la section 11.2, nous avons utilisé un histogramme pour compter le nombre de fois que chaque lettre apparaît dans
un mot.

histogramme (s):
d = dict ()
pour c en s:
si c pas dans d:
d [c] = 1

168

Chapitre 17. Classes et méthodes

autre:
d [c] = d [c] +1
retour d
Cette fonction fonctionne également pour les listes, les n-uplets et même les dictionnaires, à condition que les éléments de
s sont hashable, ils peuvent donc être utilisés comme clés dans d.
>>> t = ['spam', 'oeuf', 'spam', 'spam', 'bacon', 'spam']
>>> histogramme (t)
{'bacon': 1, 'oeuf': 1, 'spam': 4}
Les fonctions qui fonctionnent avec plusieurs types sont appelées polymorphes. Le polymorphisme peut faciliter la réutilisation du code. Par exemple, la somme de la fonction intégrée, qui ajoute les éléments d’un
sequence, fonctionne tant que les éléments de la séquence supportent l’ajout.
Puisque les objets Time fournissent une méthode add, ils fonctionnent avec sum:







En général, si toutes les opérations d’une fonction fonctionnent avec un type donné, la fonction
fonctionne avec ce type.
Le meilleur type de polymorphisme est le type involontaire, où vous découvrez qu'une fonction que vous avez déjà écrite peut être appliquée à un type que vous n'avez jamais planifié.

17h10

Débogage

Il est légal d’ajouter des attributs à des objets à tout moment de l’exécution d’un programme, mais si
vous avez des objets du même type qui n'ont pas les mêmes attributs, il est facile de faire
des erreurs. Il est considéré comme une bonne idée d’initialiser tous les attributs d’un objet dans le
méthode.
Si vous n'êtes pas sûr qu'un objet possède un attribut particulier, vous pouvez utiliser la fonction intégrée
hasattr (voir section 15.7).
Une autre façon d'accéder aux attributs est la fonction intégrée vars, qui prend un objet et
renvoie un dictionnaire qui associe des noms d'attributs (sous forme de chaînes) à leurs valeurs:




À des fins de débogage, il peut être utile de garder cette fonction à portée de main:



print_attributes parcourt le dictionnaire et affiche chaque nom d'attribut et sa valeur correspondante.
La fonction intégrée getattr prend un objet et un nom d'attribut (sous forme de chaîne) et renvoie
la valeur de l'attribut.

17.11. Interface et implémentation

17.11

169

Interface et implémentation

L’un des objectifs de la conception orientée objet est de rendre le logiciel plus facile à gérer, ce qui
signifie que vous pouvez continuer à faire fonctionner le programme lorsque d’autres éléments du système changent, et
modifier le programme pour répondre aux nouvelles exigences.
Un principe de conception permettant d’atteindre cet objectif consiste à séparer les interfaces des implémentations. Pour les objets, cela signifie que les méthodes fournies par une classe ne doivent pas dépendre
sur la façon dont les attributs sont représentés.
Par exemple, dans ce chapitre, nous avons développé une classe qui représente une heure de la journée. Les méthodes
fournis par cette classe incluent time_to_int, is_after et add_time.
Nous pourrions mettre en œuvre ces méthodes de plusieurs manières. Les détails de la mise en œuvre
dépend de la façon dont nous représentons le temps. Dans ce chapitre, les attributs d’un objet Time sont heure,
minute et seconde.
Comme alternative, nous pourrions remplacer ces attributs par un seul entier représentant le
nombre de secondes depuis minuit. Cette implémentation ferait que certaines méthodes, comme
is_after, plus facile à écrire, mais rend les autres méthodes plus difficiles.
Après avoir déployé une nouvelle classe, vous découvrirez peut-être une meilleure implémentation. Si d'autres parties
du programme utilisent votre classe, il peut être fastidieux et sujet aux erreurs de changer
L'interface.
Mais si vous avez soigneusement conçu l’interface, vous pouvez modifier l’implémentation sans
modification de l'interface, ce qui signifie que les autres parties du programme ne doivent pas être modifiées.

17.12

Glossaire

langage orienté objet: langage offrant des fonctionnalités, telles que des types et des méthodes définis par le programmeur, facilitant la programmation orientée objet.
programmation orientée objet: style de programmation dans lequel les données et les opérations
qui le manipulent sont organisés en classes et méthodes.
méthode: fonction définie dans une définition de classe et appelée sur des instances de
cette classe.
subject: L'objet sur lequel une méthode est invoquée.
argument positional: un argument qui n'inclut pas un nom de paramètre, donc ce n'est pas un
argument de mot clé.
surcharge de l’opérateur: Changer le comportement d’un opérateur comme + pour qu’il fonctionne avec
type défini par le programmeur.
répartition basée sur le type: modèle de programmation qui vérifie le type d'un opérande et appelle différentes fonctions pour différents types.
polymorphe: se rapportant à une fonction pouvant fonctionner avec plusieurs types.
masquage d'informations: principe selon lequel l'interface fournie par un objet ne doit pas dépendre de sa mise en oeuvre, en particulier de la représentation de ses attributs.

170

17.13

Chapitre 17. Classes et méthodes

Des exercices

Exercice 17.1. Téléchargez le code de ce chapitre à partir de http: // thinkpython2. com / code /
Time2. py. Changez les attributs de Time en un entier représentant les secondes depuis minuit. Modifiez ensuite les méthodes (et la fonction int_to_time) pour utiliser la nouvelle implémentation. Vous ne devriez pas avoir à modifier le code de test dans main. Lorsque vous avez terminé, la sortie devrait
être le même qu'avant. Solution: http: // thinkpython2. com / code / Time2_ soln. py.
Exercice 17.2. Cet exercice est un récit édifiant sur l’un des exercices les plus courants et difficiles à
trouver, des erreurs en Python. Ecrivez une définition pour une classe nommée Kangaroo avec les méthodes suivantes:
1. Une méthode __init__ qui initialise un attribut nommé pouch_contents à une liste vide.
2. Une méthode nommée put_in_pouch qui prend un objet de tout type et l’ajoute à
pouch_contents.
3. Une méthode __str__ qui renvoie une représentation sous forme de chaîne de l'objet Kangourou et du contenu de la poche.
Testez votre code en créant deux objets Kangourou, en les affectant à des variables nommées kanga et
roo, puis en rajoutant au contenu de la poche de kanga.
Téléchargez http: // thinkpython2. com / code / BadKangaroo. py. Il contient une solution à la
problème précédent avec un gros bug méchant. Trouvez et corrigez le bogue.
Si vous êtes bloqué, vous pouvez télécharger http: // thinkpython2. com / code / GoodKangaroo. py,
ce qui explique le problème et démontre une solution.